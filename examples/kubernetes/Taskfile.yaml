version: "3"

vars:
  NAMESPACE: inference-gateway
  UI_RELEASE: inference-gateway-ui
  CHART_VERSION: 0.6.1

tasks:
  deploy-infrastructure:
    desc: Create a local Kubernetes cluster
    cmds:
      - ctlptl apply -f Cluster.yaml
      - |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
      - |
        echo "Installing NGINX Ingress Controller..."
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace kube-system \
          --version 4.12.1 \
          --wait \
          ingress-nginx ingress-nginx/ingress-nginx
      - echo "Installing cert-manager..."
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace cert-manager \
          --version 1.17.1 \
          --set crds.enabled=true \
          --wait \
          cert-manager jetstack/cert-manager
      - echo "Creating self-signed issuer..."
      - |
        kubectl apply -f - <<EOF
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: selfsigned-issuer
        spec:
          selfSigned: {}
        EOF

  delete-cluster:
    desc: Delete the local Kubernetes cluster
    cmds:
      - ctlptl delete cluster -f Cluster.yaml

  deploy:
    desc: Deploy the UI with Gateway enabled (default behavior)
    cmds:
      - echo "Deploying UI with Gateway..."
      - |
        helm upgrade --install {{.UI_RELEASE}} oci://ghcr.io/inference-gateway/charts/inference-gateway-ui --version {{.CHART_VERSION}} \
          --create-namespace \
          --namespace {{.NAMESPACE}}

  deploy-ui-only:
    desc: Deploy just the UI, connecting to existing Gateway
    cmds:
      - echo "Deploying UI only..."
      - |
        helm upgrade --install {{.UI_RELEASE}} oci://ghcr.io/inference-gateway/charts/inference-gateway-ui --version {{.CHART_VERSION}} \
          --create-namespace \
          --namespace {{.NAMESPACE}} \
          --set gateway.enabled=false

  deploy-with-ingress:
    desc: Deploy the UI and Gateway with Ingress enabled
    cmds:
      - echo "Deploying UI with Gateway and Ingress..."
      - |
        helm upgrade --install {{.UI_RELEASE}} ../../charts/inference-gateway-ui \
          --create-namespace \
          --namespace {{.NAMESPACE}} \
          --set replicaCount=1 \
          --set gateway.enabled=true \
          --set gateway.envFrom.secretRef=inference-gateway \
          --set ingress.enabled=true \
          --set ingress.className=nginx \
          --set ingress.hosts[0].host=ui.inference-gateway.local \
          --set ingress.hosts[0].paths[0].path=/ \
          --set ingress.hosts[0].paths[0].pathType=Prefix \
          --set ingress.tls[0].secretName=inference-gateway-ui-tls \
          --set ingress.tls[0].hosts[0]=ui.inference-gateway.local

  port-forward:
    desc: Port-forward to access the UI locally
    cmds:
      - kubectl port-forward svc/{{.UI_RELEASE}} 3000:3000 -n {{.NAMESPACE}}

  gateway-port-forward:
    desc: Port-forward to access the Gateway API directly
    cmds:
      - kubectl port-forward svc/{{.UI_RELEASE}}-gateway 8080:8080 -n {{.NAMESPACE}}

  clean:
    desc: Remove the deployment
    cmds:
      - helm uninstall {{.UI_RELEASE}} -n {{.NAMESPACE}} || true

  full-clean:
    desc: Remove deployment and namespace
    cmds:
      - task: clean
      - kubectl delete namespace {{.NAMESPACE}} || true

  setup-secrets:
    desc: Set up API key secrets for providers
    cmds:
      - echo "Enter your DeepSeek API key:"
      - |
        read -s DEEPSEEK_API_KEY && kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: inference-gateway
          namespace: inference-gateway
          annotations:
            meta.helm.sh/release-name: inference-gateway-ui
            meta.helm.sh/release-namespace: inference-gateway
          labels:
            app.kubernetes.io/managed-by: Helm
        type: Opaque
        stringData:
          DEEPSEEK_API_KEY: $DEEPSEEK_API_KEY
        EOF
      - echo "Secret created"

  logs-ui:
    desc: Show logs for UI pods
    cmds:
      - kubectl logs -l app.kubernetes.io/name=ui -n {{.NAMESPACE}} --tail=100 -f

  logs-gateway:
    desc: Show logs for Gateway pods
    cmds:
      - kubectl logs -l app.kubernetes.io/name=gateway -n {{.NAMESPACE}} --tail=100 -f

  status:
    desc: Show status of all pods in the namespace
    cmds:
      - kubectl get pods -n {{.NAMESPACE}}
