version: "3"

vars:
  NAMESPACE: inference-gateway
  UI_RELEASE: inference-gateway-ui
  CHART_VERSION: 0.7.0

tasks:
  deploy-infrastructure:
    desc: Create a local Kubernetes cluster
    cmds:
      - ctlptl apply -f Cluster.yaml
      - |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo add jetstack https://charts.jetstack.io
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo update
      - |
        echo "Installing NGINX Ingress Controller..."
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace kube-system \
          --version 4.12.1 \
          --wait \
          ingress-nginx ingress-nginx/ingress-nginx
      - echo "Installing cert-manager..."
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace cert-manager \
          --version 1.17.1 \
          --set crds.enabled=true \
          --wait \
          cert-manager jetstack/cert-manager
      - echo "Creating self-signed issuer..."
      - |
        kubectl apply -f - <<EOF
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: selfsigned-issuer
        spec:
          selfSigned: {}
        EOF
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace idp \
          --version 16.6.2 \
          --set global.postgresql.auth.username=dbusername \
          --set global.postgresql.auth.password=dbpassword \
          --set global.postgresql.auth.database=keycloak \
          keycloak-db bitnami/postgresql \
          --wait
      - kubectl -n idp apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.1.4/kubernetes/keycloaks.k8s.keycloak.org-v1.yml
      - kubectl -n idp apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.1.4/kubernetes/keycloakrealmimports.k8s.keycloak.org-v1.yml
      - kubectl -n idp apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.1.4/kubernetes/kubernetes.yml
      - |
        kubectl apply -f - <<EOF
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: keycloak-cert
          namespace: idp
        spec:
          secretName: keycloak-tls
          issuerRef:
            name: selfsigned-issuer
            kind: ClusterIssuer
          commonName: keycloak.inference-gateway.local
          dnsNames:
            - keycloak.inference-gateway.local
            - keycloak-service.idp.svc.cluster.local
          subject:
            organizations:
            - Inference Gateway
            organizationalUnits:
            - IT
            countries:
            - US
            localities:
            - San Francisco
            provinces:
            - California
        EOF
      - |
        kubectl -n idp apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: keycloak-db-postgresql
          labels:
            app.kubernetes.io/name: keycloak
            app.kubernetes.io/instance: keycloak
            app.kubernetes.io/version: "26.1.4"
            app.kubernetes.io/component: identity-provider
            app.kubernetes.io/part-of: inference-gateway
        type: Opaque
        stringData:
          username: dbusername
          password: dbpassword
        EOF
      - |
        kubectl -n idp apply -f - <<EOF
        apiVersion: k8s.keycloak.org/v2alpha1
        kind: Keycloak
        metadata:
          name: keycloak
          labels:
            app.kubernetes.io/name: keycloak
            app.kubernetes.io/instance: keycloak
            app.kubernetes.io/version: "26.1.4"
            app.kubernetes.io/component: identity-provider
            app.kubernetes.io/part-of: inference-gateway
        spec:
          instances: 2
          startOptimized: false
          ingress:
            enabled: false
          db:
            vendor: postgres
            host: keycloak-db-postgresql
            usernameSecret:
              name: keycloak-db-postgresql
              key: username
            passwordSecret:
              name: keycloak-db-postgresql
              key: password
            database: keycloak
          http:
            httpEnabled: true
            httpPort: 8180
            httpsPort: 8543
            tlsSecret: keycloak-tls
          httpManagement:
            port: 9000
          hostname:
            hostname: keycloak.inference-gateway.local
            strict: true
          features:
            disabled:
              - admin
              - step-up-authentication
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "2000m"
              memory: "2Gi"
          scheduling:
            affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app.kubernetes.io/name
                        operator: In
                        values:
                        - keycloak
                    topologyKey: kubernetes.io/hostname
        EOF
      - |
        kubectl -n idp apply -f - <<EOF
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: keycloak
          namespace: idp
          labels:
            app.kubernetes.io/name: keycloak
            app.kubernetes.io/instance: keycloak
            app.kubernetes.io/version: "26.1.4"
            app.kubernetes.io/component: identity-provider
            app.kubernetes.io/part-of: inference-gateway
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        spec:
          ingressClassName: nginx
          tls:
          - hosts:
            - keycloak.inference-gateway.local
            secretName: keycloak-tls
          rules:
            - host: keycloak.inference-gateway.local
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: keycloak-service
                        port:
                          number: 8543
        EOF
      - task: import-realm

  import-realm:
    desc: "Import Keycloak realm using CRD"
    cmds:
      - |
        kubectl -n idp apply -f - <<EOF
        apiVersion: k8s.keycloak.org/v2alpha1
        kind: KeycloakRealmImport
        metadata:
          name: inference-gateway-realm
          namespace: idp
          labels:
            app.kubernetes.io/name: keycloak
            app.kubernetes.io/instance: keycloak
            app.kubernetes.io/version: "26.1.4"
            app.kubernetes.io/component: identity-provider
            app.kubernetes.io/part-of: inference-gateway
        spec:
          keycloakCRName: keycloak
          realm:
            {
              "realm": "inference-gateway-realm",
              "enabled": true,
              "registrationAllowed": false,
              "displayName": "Example Keycloak Sign-In",
              "displayNameHtml": "<h1 style=\"font-size: 40pt; font-weight: 400;\">Keycloak Sign-In</h1>",
              "clients": [
                {
                  "clientId": "inference-gateway-client",
                  "enabled": true,
                  "protocol": "openid-connect",
                  "standardFlowEnabled": true,
                  "implicitFlowEnabled": false,
                  "directAccessGrantsEnabled": true,
                  "serviceAccountsEnabled": false,
                  "publicClient": false,
                  "redirectUris": ["https://ui.inference-gateway.local/*"],
                  "webOrigins": ["https://ui.inference-gateway.local"],
                  "clientAuthenticatorType": "client-secret",
                  "secret": "very-secret",
                  "protocolMappers": [
                    {
                      "name": "audience-mapper",
                      "protocol": "openid-connect",
                      "protocolMapper": "oidc-audience-mapper",
                      "config": {
                        "included.client.audience": "inference-gateway-client",
                        "id.token.claim": "true",
                        "access.token.claim": "true",
                        "add.to.id.token": "true",
                        "add.to.access.token": "true"
                      }
                    }
                  ]
                }
              ],
              "users": [
                {
                  "username": "user",
                  "firstName": "Example",
                  "lastName": "User",
                  "email": "example@keycloak.org",
                  "enabled": true,
                  "credentials": [
                    {
                      "type": "password",
                      "value": "password",
                      "temporary": false
                    }
                  ],
                  "clientRoles": {
                    "account": ["manage-account"]
                  },
                  "realmRoles": []
                }
              ]
            }
        EOF

  delete-cluster:
    desc: Delete the local Kubernetes cluster
    cmds:
      - ctlptl delete cluster -f Cluster.yaml

  deploy:
    desc: Deploy the UI with Gateway enabled (default behavior)
    cmds:
      - echo "Deploying UI with Gateway..."
      - |
        helm upgrade --install {{.UI_RELEASE}} oci://ghcr.io/inference-gateway/charts/inference-gateway-ui --version {{.CHART_VERSION}} \
          --create-namespace \
          --namespace {{.NAMESPACE}} \
          --set config.ENABLE_AUTH=false \
          --set gateway.config.ENABLE_AUTH=false

  deploy-ui-only:
    desc: Deploy just the UI, connecting to existing Gateway
    cmds:
      - echo "Deploying UI only..."
      - |
        helm upgrade --install {{.UI_RELEASE}} oci://ghcr.io/inference-gateway/charts/inference-gateway-ui --version {{.CHART_VERSION}} \
          --create-namespace \
          --namespace {{.NAMESPACE}} \
          --set config.ENABLE_AUTH=false \
          --set gateway.enabled=false

  deploy-with-ingress:
    desc: Deploy the UI and Gateway with Ingress enabled
    cmds:
      - echo "Deploying UI with Gateway and Ingress..."
      - |
        helm upgrade --install {{.UI_RELEASE}} oci://ghcr.io/inference-gateway/charts/inference-gateway-ui --version {{.CHART_VERSION}} \
          --create-namespace \
          --namespace {{.NAMESPACE}} \
          --set replicaCount=1 \
          --set gateway.envFrom.secretRef=inference-gateway \
          --set gateway.enabled=true \
          --set gateway.config.ENABLE_AUTH=false \
          --set config.ENABLE_AUTH=false \
          --set ingress.enabled=true \
          --set ingress.className=nginx \
          --set ingress.hosts[0].host=ui.inference-gateway.local \
          --set ingress.hosts[0].paths[0].path=/ \
          --set ingress.hosts[0].paths[0].pathType=Prefix \
          --set ingress.tls[0].secretName=inference-gateway-ui-tls \
          --set ingress.tls[0].hosts[0]=ui.inference-gateway.local

  deploy-with-authentication:
    desc: Deploy the UI with authentication enabled
    cmds:
      - kubectl create ns inference-gateway -o yaml --dry-run=client | kubectl apply --server-side -f -
      - | # Trust the self-signed certificate
        kubectl create configmap keycloak-ca \
          -n inference-gateway \
          --from-literal=ca.crt="$(kubectl get secret keycloak-tls -n idp -o jsonpath='{.data.ca\.crt}' | base64 -d)" \
          --dry-run=client -o yaml | kubectl apply --server-side -f -
      - |
        # HACK: because the keycloak is deployed on the same cluster and not somewhere else, 
        # we'll rewrite and resolve to the ingress instead of letting it connect via the internal dns,
        # Reason is - 
        # keycloak supports only 1 issuer(iss), in production you most likely deploy keycloak somewhere 
        # else and the endpoint will be publicly available, so there should be no issues, the hack is only for
        # this local setup - to make the keycloak.inference-gateway.local available also from within the cluster
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: coredns-custom
          namespace: kube-system
        data:
          keycloak.inference-gateway.server: |
            keycloak.inference-gateway.local {
                log
                rewrite name keycloak.inference-gateway.local host.k3d.internal
                forward . 127.0.0.1
            }
        EOF
        kubectl -n kube-system rollout restart deployment coredns
        kubectl -n kube-system rollout status deployment coredns
      - echo "Deploying dummy secret for authentication..."
      - |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: inference-gateway-ui
          namespace: {{.NAMESPACE}}
          annotations:
            meta.helm.sh/release-name: inference-gateway-ui
            meta.helm.sh/release-namespace: inference-gateway
          labels:
            app.kubernetes.io/managed-by: Helm
        type: Opaque
        stringData:
          NEXTAUTH_SECRET: dummy-secret
          KEYCLOAK_ID: inference-gateway-client
          KEYCLOAK_SECRET: very-secret
          KEYCLOAK_ISSUER: https://keycloak.inference-gateway.local/realms/inference-gateway-realm
        EOF
      - echo "Deploying UI with authentication..."
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace {{.NAMESPACE}} \
          --set replicaCount=1 \
          --set gateway.envFrom.secretRef=inference-gateway \
          --set envFrom.secretRef.create=false \
          --set config.NEXTAUTH_URL=https://ui.inference-gateway.local \
          --set ingress.enabled=true \
          --set ingress.className=nginx \
          --set ingress.hosts[0].host=ui.inference-gateway.local \
          --set ingress.hosts[0].paths[0].path=/ \
          --set ingress.hosts[0].paths[0].pathType=Prefix \
          --set ingress.tls[0].secretName=inference-gateway-ui-tls \
          --set ingress.tls[0].hosts[0]=ui.inference-gateway.local \
          --set volumes[0].name=keycloak-ca \
          --set volumes[0].configMap.name=keycloak-ca \
          --set volumeMounts[0].name=keycloak-ca \
          --set volumeMounts[0].mountPath=/usr/local/share/ca-certificates/keycloak-ca.crt \
          --set volumeMounts[0].subPath=ca.crt \
          --set volumeMounts[0].readOnly=true \
          --set-string env[0].name=SSL_CERT_FILE \
          --set-string env[0].value=/usr/local/share/ca-certificates/keycloak-ca.crt \
          --set-string env[1].name=NODE_TLS_REJECT_UNAUTHORIZED \
          --set-string env[1].value=0 \
          {{.UI_RELEASE}} oci://ghcr.io/inference-gateway/charts/inference-gateway-ui \
          --version {{.CHART_VERSION}}

  port-forward:
    desc: Port-forward to access the UI locally
    cmds:
      - kubectl port-forward svc/{{.UI_RELEASE}} 3000:3000 -n {{.NAMESPACE}}

  gateway-port-forward:
    desc: Port-forward to access the Gateway API directly
    cmds:
      - kubectl port-forward svc/{{.UI_RELEASE}}-gateway 8080:8080 -n {{.NAMESPACE}}

  clean:
    desc: Remove the deployment
    cmds:
      - helm uninstall {{.UI_RELEASE}} -n {{.NAMESPACE}} || true

  full-clean:
    desc: Remove deployment and namespace
    cmds:
      - task: clean
      - kubectl delete namespace {{.NAMESPACE}} || true

  setup-secrets:
    desc: Set up API key secrets for providers
    cmds:
      - echo "Enter your DeepSeek API key:"
      - |
        read -s DEEPSEEK_API_KEY && kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: inference-gateway
          namespace: inference-gateway
          annotations:
            meta.helm.sh/release-name: inference-gateway-ui
            meta.helm.sh/release-namespace: inference-gateway
          labels:
            app.kubernetes.io/managed-by: Helm
        type: Opaque
        stringData:
          DEEPSEEK_API_KEY: $DEEPSEEK_API_KEY
        EOF
      - echo "Secret created"

  logs-ui:
    desc: Show logs for UI pods
    cmds:
      - kubectl logs -l app.kubernetes.io/name=ui -n {{.NAMESPACE}} --tail=100 -f

  logs-gateway:
    desc: Show logs for Gateway pods
    cmds:
      - kubectl logs -l app.kubernetes.io/name=gateway -n {{.NAMESPACE}} --tail=100 -f

  status:
    desc: Show status of all pods in the namespace
    cmds:
      - kubectl get pods -n {{.NAMESPACE}}
